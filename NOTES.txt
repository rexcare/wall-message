
NOTES:

// Backend architecture layers
- route registry (central routing registry)
- api (client endpoints, call into model layer, format response)
- model (operate on data objects, business logic)
- data object (stateful models, represent deserialized records, implements CRUD)
- datastore driver (intermediary interface between application and datastore)


// How dataobjects use the database drivers

Dataobjects accept as a param a database_driver. If this is not passed, a
default could be either hardcoded or set in a dataobject.config.py file

dataobject interface:
	perhaps these could be included in a dataObjectTemplate:
		- create
		- find_by_[field]
		- get_[field]
		- set_[field]
		- save
	or could be one method for each in BaseDataObject class:
		- create(prop_dict)
		- find_by(prop_dict)
		- *** maybe... find_or_create_by(prop_dict) ***
		- get(prop_name)
		- set(prop_name, prop_value)
		- save()
	other than CRUD interactions with the database_driver, dataobjects should
	do things that pertain to itself:
		- to_dict() (present its state)
		- ...more here



CREATE TABLE person (
	id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	created_ts INT(11) NOT NULL,
	updated_ts INT(11) NOT NULL,
	name VARCHAR(255),
	age INT(6),
	male BOOL
);


